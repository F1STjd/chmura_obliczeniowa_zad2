# .env.example - Przykład konfiguracji zmiennych środowiskowych

# ===================================================================
# GitHub Actions Secrets - Kopiuj te wartości do ustawień repozytorium
# ===================================================================

# DockerHub credentials (wymagane dla cache)
DOCKERHUB_USERNAME=your_dockerhub_username
DOCKERHUB_TOKEN=dckr_pat_your_personal_access_token

# GitHub Container Registry (opcjonalne - domyślnie używa GITHUB_TOKEN)
# GHCR_TOKEN=ghp_your_github_personal_access_token

# ===================================================================
# Konfiguracja workflow - edytuj w .github/workflows/build-and-publish.yml
# ===================================================================

# Cache repository w DockerHub (zmień na swoje)
CACHE_REPO=your_dockerhub_username/buildcache

# Target registry (domyślnie GHCR)
REGISTRY=ghcr.io

# ===================================================================
# Instrukcje konfiguracji
# ===================================================================

# 1. Utwórz konto DockerHub (jeśli nie masz): https://hub.docker.com
# 2. Utwórz publiczne repozytorium 'buildcache' w DockerHub
# 3. Wygeneruj Personal Access Token w DockerHub:
#    - Account Settings → Security → New Access Token
#    - Nazwa: "GitHub Actions CI/CD"
#    - Uprawnienia: Read, Write, Delete
# 4. Dodaj secrets do GitHub:
#    - Settings → Secrets and variables → Actions
#    - DOCKERHUB_USERNAME i DOCKERHUB_TOKEN
# 5. Zaktualizuj CACHE_REPO w workflow na swoje repozytorium
# 6. Push do main lub utwórz tag aby uruchomić pipeline

# ===================================================================
# Testowanie lokalne (opcjonalne)
# ===================================================================

# Test logowania do DockerHub:
# echo $DOCKERHUB_TOKEN | docker login --username $DOCKERHUB_USERNAME --password-stdin

# Test buildx multi-arch:
# docker buildx create --name multiarch --use
# docker buildx build --platform linux/amd64,linux/arm64 -t test:latest .

# Test cache lokalnie:
# docker buildx build --cache-to type=local,dest=./cache-dir .
# docker buildx build --cache-from type=local,src=./cache-dir .
