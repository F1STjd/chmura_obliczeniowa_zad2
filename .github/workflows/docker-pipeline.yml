# GitHub Actions Workflow for Multi-arch Docker Build with Security Scanning
# Strategia tagowania:
# - latest: najnowsza stabilna wersja z main/master branch
# - SHA tag: unikalna wersja dla każdego commit'a, umożliwia rollback
# - Cache tag pattern: <dockerhub-username>/project-cache:{arch}-cache-{sha} 
#   zapewnia oddzielny cache dla każdej architektury i commit'a
#
# Wybór skanera bezpieczeństwa: Trivy
# Uzasadnienie: Trivy jest prostszy w konfiguracji niż Docker Scout, ma lepszą 
# integrację z GitHub Actions, oferuje darmowe skanowanie bez wymagania dodatkowych
# kont i ma doskonałą dokumentację: https://github.com/aquasecurity/trivy-action

name: Docker Multi-arch Build and Security Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  # Automatyczne określenie nazwy repozytorium z GitHub context
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_CACHE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/project-cache

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Log in to Docker Hub (for cache)
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create cache tags
      id: cache-tag
      run: |
        echo "cache-tag-amd64=${{ env.DOCKERHUB_CACHE_REPO }}:amd64-cache-${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "cache-tag-arm64=${{ env.DOCKERHUB_CACHE_REPO }}:arm64-cache-${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "cache-tag-prev-amd64=${{ env.DOCKERHUB_CACHE_REPO }}:amd64-cache" >> $GITHUB_OUTPUT
        echo "cache-tag-prev-arm64=${{ env.DOCKERHUB_CACHE_REPO }}:arm64-cache" >> $GITHUB_OUTPUT

    - name: Build Docker image for security scanning (AMD64)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: false
        load: true
        tags: test-image:${{ github.sha }}-amd64
        cache-from: |
          type=registry,ref=${{ steps.cache-tag.outputs.cache-tag-prev-amd64 }}
          type=registry,ref=${{ steps.cache-tag.outputs.cache-tag-amd64 }}
        cache-to: type=registry,ref=${{ steps.cache-tag.outputs.cache-tag-amd64 }},mode=max

    - name: Run Trivy vulnerability scanner (AMD64)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: test-image:${{ github.sha }}-amd64
        format: 'sarif'
        output: 'trivy-results-amd64.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'  # Fail the job if CRITICAL or HIGH vulnerabilities found

    - name: Upload Trivy scan results to GitHub Security tab (AMD64)
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-amd64.sarif'

    - name: Build and push multi-arch Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=registry,ref=${{ steps.cache-tag.outputs.cache-tag-prev-amd64 }}
          type=registry,ref=${{ steps.cache-tag.outputs.cache-tag-amd64 }}
          type=registry,ref=${{ steps.cache-tag.outputs.cache-tag-prev-arm64 }}
          type=registry,ref=${{ steps.cache-tag.outputs.cache-tag-arm64 }}
        cache-to: |
          type=registry,ref=${{ steps.cache-tag.outputs.cache-tag-amd64 }},mode=max
          type=registry,ref=${{ steps.cache-tag.outputs.cache-tag-arm64 }},mode=max
  # Opcjonalny job do konfiguracji SSH (jeśli potrzebny)
  setup-ssh:
    runs-on: ubuntu-latest
    if: false  # Ustaw na true jeśli potrzebna konfiguracja SSH
    
    steps:
    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add known hosts
      run: |
        ssh-keyscan github.com >> ~/.ssh/known_hosts
